<project name="StarWarsCCG" default="build" >
	<!-- default values -->
	<property name="platform" value="unity_iphone"/>
	<property name="target" value="StarWarsCCG"/>
	<property name="product" value="ProductName"/>
	<property name="configuration" value="Debug"/>
	<property name="provisionProfile" value="LM_Development"/>
	<property name="build.number" value="0"/>
	<property name="bundleId" value="com.Disney.StarWars"/>
	<property name="enviromentOptions" value="EnvDevice" />
	<property name="functionalityOptions" value="FuncDemo" />
	<property name="resourceBundleName" value="ExternalResources.unity3d" />
	
	<property name="unityVersion" value="" />
	<property name="XcodeCmdLineParams" value="" />
	<property name="projectDir" value="." />
	<property name="dataType" value="default" />
	
	<property name="output" value="${target}-${configuration}-${provisionProfile}-${build.number}" />
	
	<property environment="env"/>
	<property name="MDISNEY_HOME" value="${env.HOME}/mdisney" />
	<property name="publicToolsDir" value="${MDISNEY_HOME}/mo/production/global_framework/build_tools/public" />
	<property name="cygwinDir" value="${publicToolsDir}/cygwin64" />
	
	<taskdef resource="net/sf/antcontrib/antcontrib.properties" classpath="${publicToolsDir}/ant-contrib-1.0b3/ant-contrib.jar" />
	<taskdef resource="org/jwaresoftware/antxtras/install/antlib-advanced.xml" classpath="${publicToolsDir}/antxtras_3.0.0b1/jw-antxtras-advanced.jar;${publicToolsDir}/antxtras_3.0.0b1/jw-antxtras.jar" />

	<basename property="outFile" file="${output}" suffix="zip" />
	<dirname property="outputDir" file="${output}"/>
	<mkdir dir="${outputDir}"/>
		
	<echo>VersionName:"${versionName} and versioncode:"${versionCode}" projectDir:"${projectDir}</echo>
	
	<echoproperties/>
	
	<!-- conditions setting -->
	<condition property="isIphone">
		<or>
			<contains string="${platform}" substring="iphone" casesensitive="false" />
			<contains string="${assets_platform}" substring="iphone" casesensitive="false" />
		</or>
	</condition>
	
	<condition property="isAndroid">
		<or>
			<contains string="${platform}" substring="android" casesensitive="false" />
			<contains string="${assets_platform}" substring="android" casesensitive="false" />
		</or>
	</condition>
	
	<condition property="isMacServer" value="true">
		<os family="mac"/>
	</condition>
	
	<condition property="isWinServer" value="true">
		<os family="windows"/>
	</condition>
	
	<!--<target name="build" depends="clean">-->
	<target name="build">
		<delete dir="Builds/Devices" failonerror="false" />
		
		<mkdir dir="Builds/Devices"/>
		<mkdir dir="Builds/Devices/Android"/>
		<mkdir dir="Builds/Devices/IOS"/>
		
		<do if="isIphone">
			<!-- iphone -->
			<echo>PROFILES</echo>
			<echo message="provisionProfile = ${provisionProfile}"/>
			<delete>
				<fileset dir="${env.HOME}/Library/MobileDevice/Provisioning Profiles" includes="*.mobileprovision"/>
			</delete>
			<copy file="${MDISNEY_HOME}/Production/Builds/iPhone/ProvisioningProfiles/${provisionProfile}.mobileprovision" 
				  todir="${env.HOME}/Library/MobileDevice/Provisioning Profiles" />


			<!-- build -->
			<echo>UNITY BUILD</echo>
			<exec executable="/Applications/${unityVersion}/Unity.app/Contents/MacOS/Unity" dir="${projectDir}" failonerror="true">
				<arg value="-batchmode"/>
				<arg value="-quit"/>
				<arg value="-projectPath ${projectDir}"/>
				<arg value="-logfile"/>
				<arg value="-executeMethod CommandBuild.BuildIOS"/>
				<arg value="-customArgs:bundleId=${bundleId}"/>
			</exec>

			<property name="xcode.projectDir" value="${projectDir}/Builds/Devices/IOS" />
			<property name="xcode.projectName" value="Unity-iPhone" />
			<property name="xcode.target" value="Unity-iPhone" />

			<!-- replace developer signing id to distribution for non development builds, becasue UNITY generate developer for all configs -->
			<if>
				<not>
					<contains string="${configuration}" substring="Debug" casesensitive="false" />			
				</not>
				<then>
					<replace file="${xcode.projectDir}/${xcode.projectName}.xcodeproj/project.pbxproj" token="CODE_SIGN_IDENTITY = &quot;iPhone Developer&quot;" value="CODE_SIGN_IDENTITY = &quot;iPhone Distribution&quot;"/>
					<replace file="${xcode.projectDir}/${xcode.projectName}.xcodeproj/project.pbxproj" token="&quot;CODE_SIGN_IDENTITY[sdk=iphoneos*]&quot; = &quot;iPhone Developer&quot;" value="&quot;CODE_SIGN_IDENTITY[sdk=iphoneos*]&quot; = &quot;iPhone Distribution&quot;"/>
				</then>
			</if>
			
			<!-- change version in generated plist -->
			<echo>Set version to plist on versionName:"${versionName} and versioncode:"${versionCode}"</echo>
			<versionFile command="set" version="${versionName} (${versionCode})" useP4="false">
				<fileset file="Builds/Devices/IOS/Info.plist"/>
			</versionFile>
			
			<echo>XCODE BUILD</echo>
			<exec dir="${xcode.projectDir}" executable="xcodebuild" failonerror="true">
				<arg value="-project"/>
				<arg value="${xcode.projectName}.xcodeproj"/>
				<arg value="-target"/>
				<arg value="${xcode.target}"/>
				<arg value="-configuration"/>
				<arg value="${configuration}"/>
				<arg value="SYMROOT=build"/>
				<arg value="CODE_SIGNING_REQUIRED=NO"/>
				<arg value="clean"/>
			</exec>
			<exec dir="${xcode.projectDir}" executable="xcodebuild" failonerror="true">
				<arg value="-project"/>
				<arg value="${xcode.projectName}.xcodeproj"/>
				<arg value="-target"/>
				<arg value="${xcode.target}"/>
				<arg value="-configuration"/>
				<arg value="${configuration}"/>
				<arg value="DEBUG_INFORMATION_FORMAT=dwarf-with-dsym"/>
				<arg value="STRIP_INSTALLED_PRODUCT = YES"/>
				<arg value="GCC_GENERATE_DEBUGGING_SYMBOLS = YES"/>
				<arg line="SYMROOT=build ${XcodeCmdLineParams}"/> <!-- additonal arguments pass from build server -->
			</exec>

			<!-- copy dSYM -->
			<copy todir="${outputDir}/${outFile}.app.dSYM" >
				<!--fileset dir="${xcode.projectDir}/build/${configuration}-iphoneos/${product}.app.dSYM" /-->
				<fileset dir="${xcode.projectDir}/build/${product}.app.dSYM" />
			</copy>

			<chmod perm="ugo+w" >
				<fileset dir="${outputDir}/${outFile}.app.dSYM" />
				<dirset dir="${outputDir}/${outFile}.app.dSYM" />
			</chmod>

			<echo>PACKING IPA</echo>
			<property name="outputIpa" value="${outputDir}/${outFile}.ipa" />

			<!--exec dir="${xcode.projectDir}/build/${configuration}-iphoneos" executable="xcrun" failonerror="true" -->
			<exec dir="${xcode.projectDir}/build" executable="xcrun" failonerror="true" >
				<arg value="-sdk"/>
				<arg value="iphoneos"/>
				<arg value="PackageApplication"/>
				<arg value="-v" />
				<arg value="${product}.app"/>
				<arg value="-o"/>
				<arg value="${outputIpa}"/>
				<arg value="-embed"/>
				<arg value="${provisionProfile}.mobileprovision"/>
			</exec>		
		</do>
		
		<do if="isAndroid">
			<!-- android -->
			
			<!-- Prepare android plugin according to set parametres -->
			<antcall target="createAndroidPlugin" />
			
			<echo>UNITY BUILD</echo>
			<do if="isMacServer">
				<exec executable="${basedir}/Builds/Scripts/buildAndroid.sh" dir="Builds/Scripts/" failonerror="true">
					<!-- all arguments must be in one arg value! -->
					<arg value="-customArgs:keystoreName=${user.home}/mdisney/Production/Builds/Android/Certificates/Disney_LM.keystore+keystorePass=disney1234+keyAlias=disney_keystore+bundleVersion=${versionName}+bundleVersionCode=${versionCode}+bundleId=${bundleId}+product=${product}"/>
					<arg value="${unityVersion}"/>
				</exec>
			</do>
			
			<do if="isWinServer">
				<exec executable="c:\Program Files (x86)\Unity\Editor\Unity.exe" dir="" failonerror="true">
					<arg line="-batchmode -quit -nographics -projectPath ${basedir} -logFile ${outputDir}/${outFile}.log -executeMethod CommandBuild.BuildAndroid -customArgs:keystoreName=${user.home}/mdisney/Production/Builds/Android/Certificates/Disney_LM.keystore+keystorePass=disney1234+keyAlias=disney_keystore+bundleVersion=${versionName}+bundleVersionCode=${versionCode}+bundleId=${bundleId}+product=${product}"/>
				</exec>
			</do>

			<property name="outputApk" value="${outputDir}/${outFile}.apk" />
			
			<!-- copy apk -->
			<copy file="Builds/Devices/Android/${product}.apk" tofile="${outputApk}"/>
			
			<!-- Pack manifest -->
			<antcall target="packAndroidManifest" />
		</do>

	</target>

	<target name="rollback" description="called if build failed or stopped">
	</target>
	
	<!-- Create specific resource bundle from build server -->
	<target name="createSpecificResources" depends="_checkP4Sync">
		<!-- doesnt work on windows, we dont need it anymore -->
		<!--var name="platform" unset="true"/>
		<property name="platform" value="${assets_platform}"/-->
		
		<antcall target="createAndPackResources" />
		
		<zip destfile="${outputDir}/${outFile}.zip" encoding="UTF-8" createUnicodeExtraFields="always">
			<fileset dir="${basedir}/Assets/Resources/" >
				<include name="version.txt"/>
			</fileset>
		</zip>
	</target>
	
	<!-- Create specific localisation bundle from build server -->
	<target name="createSpecificLocalisation" depends="_checkP4Sync">
		<var name="platform" unset="true"/>
		<property name="platform" value="${assets_platform}"/>
		
		<antcall target="createAndPackLoc" />
		
		<zip destfile="${outputDir}/${outFile}.zip" encoding="UTF-8" createUnicodeExtraFields="always">
			<fileset dir="${basedir}/Assets/Resources/" >
				<include name="version.txt"/>
			</fileset>
		</zip>
	</target>
	
	<target name="createAndPackResources">
		<echo>Create and pack resources for platform: ${assets_platform}</echo>
		
		<mkdir dir="Assets/StreamingAssets"/>
		
		<!-- for actual platform create resource bundle -->
		<antcall target="createResources" />
		
		<!-- and add to platform directory and pack resources to zip -->
		<antcall target="packResources" />
		
		<!-- delete if is CDN (under 50MB) build -->
		<antcall target="cleanStreamingAssets" />
		
		<!-- for actual platform create resource bundle -->
		<antcall target="createLoc" />

		<!-- and add to platform directory and pack resources to zip -->
		<antcall target="packLoc" />
	</target>
	
	<target name="createAndPackLoc">
		<echo>Create and pack loc for platform: ${assets_platform}</echo>

		<!-- make sure we have a clean folder -->
		<antcall target="cleanStreamingAssets" />
		
		<!-- for actual platform create resource bundle -->
		<antcall target="createLoc" />

		<!-- and add to platform directory and pack resources to zip -->
		<antcall target="packLoc" />
	</target>
	
	<target name="createConfiguration">
		<echo>buildConfig with arguments: ${enviromentOptions} ${functionalityOptions}</echo>
		<echo>Prepare configuration on mac ${isMacServer} or win ${isWinServer}</echo>
		
		<do if="isMacServer">
			<exec executable="${basedir}/Builds/Scripts/buildConfig.sh" dir="Builds/Scripts/" failonerror="true">
				<arg value="${enviromentOptions}, ${functionalityOptions}"/>
			</exec>
		</do>
		
		<do if="isWinServer">
			<exec executable="${cygwinDir}\bin\bash" dir="Builds\Scripts" failonerror="true">
				<arg value="buildConfig.sh"/>
				<arg value="${enviromentOptions}, ${functionalityOptions}"/>
			</exec>
		</do>
	</target>
	
	<target name="createResources">
		<echo>Create bundle for platform: ${assets_platform} and base dir ${basedir}</echo>
		<echo>Prepare configuration on mac ${isMacServer} or win ${isWinServer}</echo>
		
		<do if="isMacServer">
			<exec executable="${basedir}/Builds/Scripts/buildBundles.sh" dir="Builds/Scripts/" failonerror="true">
				<arg value="${assets_platform}"/>
				<arg value="${unityVersion}"/>
			</exec>
		</do>
		
		<do if="isWinServer">
			<exec executable="${basedir}/Builds/Scripts/buildBundlesWin.bat" dir="Builds/Scripts" failonerror="true">
				<arg value="${assets_platform}"/>
				<arg value="${outputDir}/${outFile}.log"/>
				<arg value="${unityVersion}"/>
			</exec>
		</do>
	</target>
	
	<target name="createLoc">
		<echo>Create bundle for platform: ${assets_platform}</echo>
		<echo>Prepare configuration on mac ${isMacServer} or win ${isWinServer}</echo>
		
		<do if="isMacServer">
			<exec executable="${basedir}/Builds/Scripts/buildLoc.sh" dir="Builds/Scripts/" failonerror="true">
				<arg value="${assets_platform}"/>
				<arg value="${unityVersion}"/>
			</exec>
		</do>
		
		<do if="isWinServer">
			<exec executable="${basedir}/Builds/Scripts/buildLocWin.bat" dir="Builds/Scripts" failonerror="true">
				<arg value="${assets_platform}"/>
				<arg value="${outputDir}/${outFile}.log"/>
				<arg value="${unityVersion}"/>
			</exec>
		</do>
	</target>

	<target name="packResources">
		<echo>Pack bundle for platform: ${assets_platform}</echo>
		
		<!-- select platform directory -->
		<do if="isIphone">
			<property name="platformDir" value="platform_ios" />
		</do>
		
		<do if="isMetro">
			<property name="platformDir" value="platform_win8" />
		</do>
		
		<do if="isAndroid">
			<property name="platformDir" value="platform_android" />
		</do>
		
		<property name="tmpDir" value="tmp" />
		<property name="platformDirPath" value="${tmpDir}/${platformDir}" />
		
		<!-- create platform directory -->
		<mkdir dir="${platformDirPath}"/>
		
		<!-- copy files to platform directory -->
	        <copy todir="${platformDirPath}">
			<fileset dir="Assets/StreamingAssets/">
				<include name="**/**"/>
				<exclude name="**/*.meta"/>
			</fileset>
		</copy>
		
		<!-- zip platform directory with resources files -->
		<echo> platformDirPath:${platformDirPath} </echo>
		<zip destfile="${outputDir}/${outFile}.res.zip" encoding="UTF-8" createUnicodeExtraFields="always">
			<fileset dir="${tmpDir}" includes="${platformDir}/**"/>
		</zip>
		
		<!-- delete tmp directory -->
		<delete dir="${tmpDir}" failonerror="false" />
	</target>
	
	<target name="packLoc">
		<echo>Pack loc for platform: ${assets_platform}</echo>
		
		<!-- select platform directory -->
		<do if="isIphone">
			<property name="platformDir" value="platform_ios" />
		</do>
		
		<do if="isMetro">
			<property name="platformDir" value="platform_win8" />
		</do>
		
		<do if="isAndroid">
			<property name="platformDir" value="platform_android" />
		</do>
		
		<property name="tmpDir" value="tmp" />
		<property name="platformDirPath" value="${tmpDir}/${platformDir}" />
		
		<!-- create platform directory -->
		<mkdir dir="${platformDirPath}"/>
		
		<!-- copy files to platform directory -->
	        <copy todir="${platformDirPath}">
			<fileset dir="Assets/StreamingAssets/">
				<include name="**/**"/>
				<exclude name="**/*.meta"/>
			</fileset>
		</copy>
		
		<!-- zip platform directory with resources files -->
		<echo> platformDirPath:${platformDirPath} </echo>
		<zip destfile="${outputDir}/${outFile}.loc.zip" encoding="UTF-8" createUnicodeExtraFields="always">
			<fileset dir="${tmpDir}" includes="${platformDir}/**"/>
		</zip>
		
		<!-- delete tmp directory -->
		<delete dir="${tmpDir}" failonerror="false" />
	</target>
	
	<target name="cleanStreamingAssets" if="CDNVersion">
		<echo>Deleting files in StreamingAssets</echo>
		<delete includeemptydirs="true" failonerror="false">
			<fileset dir="Assets/StreamingAssets" includes="**/*"/>
		</delete>
	</target>
	
	<target name="createWorld" depends="_checkP4Sync">
		<echo>Create world json:${dataType} in:${basedir} to:${outputDir}</echo>
		<!-- run script which create world json -->
		<exec executable="python" dir="${basedir}/Assets/Data/Scripts/" failonerror="true">
			<arg value="gameData.py"/>
			<arg value="--${dataType}"/>
			<arg value="build"/>
		</exec>
		
		<!-- make copy of files and rename it -->
		<copy file="${basedir}/Assets/Data/Resources/GameData/worldJson.txt" tofile="${basedir}/Assets/Data/Resources/GameData/worldJson_${build.number}.txt"/>
		<copy file="${basedir}/Assets/Data/Resources/GameData/combinedJson.txt" tofile="${basedir}/Assets/Data/Resources/GameData/combinedJson_${build.number}.txt"/>
		
		<!-- add json build number to combinedJson.txt as value for key JsonBuildNumber -->
		<replace file="${basedir}/Assets/Data/Resources/GameData/combinedJson_${build.number}.txt" token="json_build_number" value="${build.number}"/>
		
		<!-- zip created word json -->
		<echo> outputDir:${outputDir} </echo>
		<zip destfile="${outputDir}/${outFile}.zip" encoding="UTF-8" createUnicodeExtraFields="always">
			<fileset dir="${basedir}/Assets/Data/Resources/GameData/" >
				<include name="*${build.number}*"/>
				<include name="*${build.number}*"/>
			</fileset>
		</zip>
	</target> 
	
	<target name="createAndroidPlugin">
		<echo>Build android plugin with arguments: ${bundleId}</echo>
		
		<!-- first prepare path according to bundleId -->
		<propertyregex 
			property="bundlePath" 
			input="${bundleId}" 
			regexp="\." 
			replace="/"/> 
		<echo message="The path is now &quot;${bundlePath}&quot;"/>
	
		<!-- run script for plugin creating -->
		<do if="isMacServer">
			<exec executable="${basedir}/Assets/Editor/CreateAndroidPlugin" dir="" failonerror="true">
				<arg value="${bundleId}" />
				<arg value="${bundlePath}"/>
			</exec>
		</do>
		
		<!-- on windows do it in ant -->
		<do if="isWinServer">
			<antcall target="createAndroidPluginInAnt" />
		</do>
	</target>
	
	<target name="createAndroidPluginInAnt">
		<!-- this will create android plugin completly from ant -->

		<echo message="executing CreateAndroidPlugin with package renaming" />

		<!-- predefined original package -->
		<property name="ORIG_PACKAGE" value="com.disney.StarWarsCCGLM" />
		<property name="ORIG_PACKAGE_PATH" value="PluginInitAndroid/src/com/disney/StarWarsCCGLM" />

		<!-- define new path -->
		<property name="newPackage" value="${bundleId}" />
		<property name="newPackagePath" value="PluginInitAndroid/src/${bundlePath}" />

		<!-- select used manifest template -->
		<if>
			<contains string="${newPackage}" substring="_ama" casesensitive="false" />
			<then>
				<echo message="We use Amazon manifest template" />
				<property name="androidManifest" value="AndroidManifestTemplateAmazon.xml" />
			</then>
			<else>
				<echo message="We use manifest template" />
				<property name="androidManifest" value="AndroidManifestTemplate.xml" />
			</else>
		</if>

		<!-- is package same? -->
		<if>
			<and>
				<equals arg1="${newPackage}" arg2="${ORIG_PACKAGE}" />
				<equals arg1="${newPackagePath}" arg2="${ORIG_PACKAGE_PATH}" />
			</and>
			<then>
				<echo message="Package name or path are the same as original" />
				<echo message="1,2,3,4,5. create plugin jar" />
				
				<!-- run ant task to build plugin -->
				<!--ant dir="${projectDir}/PluginInitAndroid" antfile="build.xml" target="release"/-->
				<exec executable="ant.bat" dir="" failonerror="true">
					<arg line="-f PluginInitAndroid/build.xml" />
				</exec>
			
				<echo message="6. copy AndroidManifest.xml" />
				<copy file="Assets/Plugins/Android/${androidManifest}" tofile="Assets/Plugins/Android/AndroidManifest.xml" overwrite="true" />
			</then>
			<!-- package is different -->	
			<else>
				<echo message="1. change package name to ${newPackage} and path ${newPackagePath}" />
				
				<exec executable="python" dir="" failonerror="true">
					<arg line="${projectDir}/PluginInitAndroid/replacePackageName.py ${ORIG_PACKAGE} ${newPackage} ${ORIG_PACKAGE_PATH} ${newPackagePath}" />
				</exec>
			
				<echo message="2. remove original sources" />
				<delete dir="${ORIG_PACKAGE_PATH}/.." failonerror="false" />
			
				<echo message="3. create plugin jar" />
				<exec executable="ant.bat" dir="" failonerror="true">
					<arg line="-f PluginInitAndroid/build.xml" />
				</exec>
			
				<echo message="4. change package name back to ${ORIG_PACKAGE}" />
				<exec executable="python" dir="" failonerror="true">
					<arg line="${projectDir}/PluginInitAndroid/replacePackageName.py ${newPackage} ${ORIG_PACKAGE} ${newPackagePath} ${ORIG_PACKAGE_PATH}" />
				</exec>
			
				<echo message="5. remove renamed sources" />
				<delete dir="${newPackagePath}/.." failonerror="false" />
			
				<echo message="6. change package name to ${newPackage} in AndroidManifest.xml" />
				<exec executable="python" dir="" failonerror="true">
					<arg line="${projectDir}/PluginInitAndroid/replacePackageName.py ${ORIG_PACKAGE} ${newPackage} Assets/Plugins/Android/${androidManifest} Assets/Plugins/Android/AndroidManifest.xml" />
				</exec>
			</else>
		</if>

		<echo message="7. copy created plugin to Assets/Plugins/Android/" />
		<copy file="PluginInitAndroid/bin/classes.jar" tofile="Assets/Plugins/Android/PluginInitAndroid.jar" overwrite="true" />

		<echo message="8. delete working diectory" />
		<delete includeemptydirs="true" failonerror="false">
			<fileset dir="PluginInitAndroid/bin" includes="**/*"/>
			<fileset dir="PluginInitAndroid/gen" includes="**/*"/>
			<fileset dir="PluginInitAndroid/build" includes="**/*"/>
		</delete>
	</target>
	
	<target name="packAndroidManifest">
		<echo>Create archive with android manifest</echo>
		
		<!-- zip manifest -->
		<echo> outputDir:${outputDir} </echo>
		<zip destfile="${outputDir}/${outFile}.manifest.zip" encoding="UTF-8" createUnicodeExtraFields="always">
			<fileset dir="${basedir}/Assets/Plugins/Android/" >
				<include name="AndroidManifest.xml"/>
			</fileset>
		</zip>
	</target>
	
	<!-- this target check log files if contains "p4sync" string to be shure that synchronisation was done -->
	<target name="_checkP4Sync">
		<fail message="Error p4sync not pressend in log file. Try it again">
			<condition>
				<not>
				<resourcecontains resource="${outputDir}/${outFile}.log" substring="p4sync"/>
				</not>
			</condition>
		</fail>
	</target>
</project>
